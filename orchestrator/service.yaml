apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name
  labels:
    app: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      labels:
        app: service_name
    spec:
      volumes:
        - name: workspace-volume
          emptyDir: {}
      initContainers:
        - name: copy-s3-resources
          image: amazon/aws-cli
          command: ["/bin/sh", "-c"]
          args:
            - |
              set +e  # Don't exit on errors
              echo "Starting init copy for service_name"
              
              if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
                echo "AWS credentials not configured - skipping S3 copy"
              else
                echo "Checking if S3 bucket exists..."
                if aws s3 ls s3://itexecutes/code/service_name/ >/dev/null 2>&1; then
                  echo "Found S3 objects, copying..."
                  aws s3 cp s3://itexecutes/code/service_name/ /workspace/ --recursive || echo "S3 copy failed but continuing"
                else
                  echo "No S3 objects found at s3://itexecutes/code/service_name/ - continuing with empty workspace"
                fi
              fi
              
              echo "Init container completed successfully"
              exit 0
          env:
            - name: AWS_ACCESS_KEY_ID
              value: "c25830ecddc69ec54d665bb9d7d54efc"
            - name: AWS_SECRET_ACCESS_KEY
              value: "18c224d24817746c813a72589c1ba5bc484c848469e1cc58a9035d422e8ce836"
            - name: AWS_DEFAULT_REGION
              value: "auto"
            - name: AWS_ENDPOINT_URL_S3
              value: "https://6f7742bfe6d258ddd6822a487dd5fd92.r2.cloudflarestorage.com"
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
      containers:
        - name: runner
          image: ayusz06/runner:latest
          ports:
            - containerPort: 3005 # Single combined HTTP + WebSocket port
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            # Reduced requests so pod can fit on smaller nodes (previous 1 CPU > allocatable 940m)
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          readinessProbe:
            tcpSocket:
              port: 3005
            initialDelaySeconds: 2
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 3005
            initialDelaySeconds: 10
            periodSeconds: 15

          # TODO: Move AWS credentials to a Kubernetes Secret and reference via envFrom/secretKeyRef.

---
apiVersion: v1
kind: Service
metadata:
  name: service_name
spec:
  selector:
    app: service_name
  ports:
    - protocol: TCP
      name: http-ws
      port: 3005
      targetPort: 3005
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service_name
spec:
  ingressClassName: nginx
  rules:
  - host: service_name.itexecutes.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: service_name
            port:
              number: 3005
  - host: service_name.ayusz.tech
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: service_name
            port:
              number: 3005